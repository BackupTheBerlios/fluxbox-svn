.\"
.\" Man page for Fluxbox
.\"
.\" Copyright (c) 2000 by Wilbert Berendsen <wbsoft@xs4all.nl>
.\" Copyright (c) 2001 by Matthew Hawkins <matt@mh.dropbear.id.au>
.\"
.\" Permission to use, copy, modify, and distribute this documentation for
.\" any purpose with or without fee is hereby granted, provided that the
.\" above copyright notice and this permission notice appear in all copies.
.\"
.\" THE DOCUMENTATION IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL
.\" WARRANTIES WITH REGARD TO THIS DOCUMENTATION INCLUDING ALL IMPLIED
.\" WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE
.\" AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL
.\" DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR
.\" PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
.\" TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
.\" PERFORMANCE OF THIS DOCUMENTATION
.\"
.\" Parts of the text are taken from website and several README's
.\" by His Great Hughesness himself. Why reinvent wheels?
.\"
.\" Created with NEdit, tested with ``man'' and ``tkman.''
.\" This manpage uses only standard groff and tmac.an macros.
.\" To all translators who didn't do manpages earlier (like me ;-):
.\" Read the Man-Page-Mini-HOWTO and the LDP manpage ``man 7 man''
.\" There's all I needed to know about these macros.
.\"
.\" Updated for bb 0.61 at Sat Sep  9 06:56:04 CEST 2000
.\"
.\" Changed to fluxbox  by Henrik Kinnunen (fluxgen@linuxmail.org)
.\"
.\" Updated for fluxbox 0.1.5 by Matthew Hawkins <matt@mh.dropbear.id.au>
.\"
.\" Updated for version 0.1.6 by Rando Christensen <eyez@babblica.net>
.\"
.\" Updated for version 0.1.7.1 by Stanislav Karchebny <berk@madfire.net>
.\"
.\" Updated for version 0.1.15 by Tobias Klausmann <klausman@users.sourceforge.net>
.\"
.\" Updating for version 0.9.6 by <grubert@users.sourceforge.net>
.\"
.\" ..define sort of <blockquote><pre> macro
.de EX
.ne 5
.if n .sp 1
.if t .sp .5
.nf
.in +.5i
..
.de EE
.fi
.in -.5i
.if n .sp 1
.if t .sp .5
..
.TH fluxbox 1 "January 5th, 2004" "0.9.7"
.SH NAME
fluxbox \- a window manager for X11
.SH SYNOPSIS
.BR fluxbox " \-help | \-version"
.br
.B fluxbox
.RI "[ \-rc" " rcfile " "] [ \-display" " display " ]
.SH DESCRIPTION
.\"
.\" Phirst Phew ParagraPhs taken from blackbox.alug.org
.\"
Fluxbox is yet another addition to the list of window managers for the Open
Group's X Window System, Version 11 Release 6 and above.
Fluxbox is built with C++, based on the sources of Blackbox 0.61.0.
.BR Fast .
.PP
Fluxbox provides configurable window decorations, a root menu to launch
applications and a toolbar that shows the current workspace name, the focused
application name and the current time.
There is also a workspace menu to add or remove workspaces. The `slit' can be
used to dock small applications, e.g. most of the bbtools can use the slit.
.PP
Fluxbox will iconify windows to the toolbar, in addition to adding the window
to the `Icons' submenu of the workspace menu.  One click and they reappear.
A double-click on the titlebar of a window will shade it i.e. the window will
disappear, only the titlebar stays visible.
.PP
Fluxbox uses its own graphics class to render its images on the fly.
By using style files, you can determine at a great level how your desktop looks
like.  Fluxbox styles are compatible with those of Blackbox, so users migrating
can still use their current favourite themes.
.PP
.\" TODO wmhints support
.\" TODO KDE2 GNome support
Currently KDE WM hints are not supported, but Fluxbox is already prepared to
support the new window manager specification that is now being developed for
both Gnome and KDE2.0.
.SH OPTIONS
Fluxbox supports the following commandline options:
.TP
.B \-help
Display command line options , then exit.
.TP
.B \-version
Display version info and exit.
.TP
.BI \-rc \ rcfile
Use another rcfile than the default
.IR  "~/.fluxbox/init" .
.TP
.BI \-display \ display
Start Fluxbox on the specified display.
Programs started by Fluxbox will have the
.B DISPLAY
environment variable set to this value, too.
.TP
.B \-info
Display some useful information (defaults and compiled-in features) and exit.
.TP
.B \-log \ filename
Log output to the specified file.
.\" ---------------------
.SH RUNNING FLUXBOX
This program is usually started by the user's startup script, most times called
.IR ~/.xinitrc .
To run fluxbox, modify the script by adding
.EX 0
exec fluxbox
.EE
as the last executed command of the script.
When Fluxbox terminates, the X session will terminate too.
.PP
When started, Fluxbox will try to find a default menufile in
.IR @pkgdatadir@/menu .
You can provide a system-wide menu for your users here.
.PP
On exit or restart, Fluxbox will save user defaults in the file
.I ~/.fluxbox/init
in the user's home directory.
Some resources in this file can be edited by hand.
.\" -----------------------
.SH USING FLUXBOX
Fluxbox includes keyboard handling. In order to customize your keybindings,
edit the file
.I ~/.fluxbox/keys
as described below in the section KEYS FILE.
.SS Root window (background):
Right click (button 3) will pop up the root menu.
With this you can launch your applications.
You can customize this menu for your needs.
A middle click (button 2) pops up the workspace menu.
You can add or remove a workspace, view
applications running on all workspace, inspect your icons, and jump directly to
any workspace or application.
.PP
Left clicking (button 1) on an application in the Workspaces menu will bring
you to that workspace and raise/focus that application;
middle clicking (button 2) will warp the application to the current workspace.
.SS Toolbar:
The toolbar contains up to eight fields/tools: a workspace name, the iconbar, the systemtray,
a clock and arrows for previous and next workspace and windows.
.PP
The contents can be configured in fluxbox init-file in the entry
.EX
session.screen0.toolbar.tools: clock, iconbar, workspacename
.EE
or the toolbar can be turned off by
.EX
session.screen0.toolbar.visible: false
.EE
.\" A left click on the toolbar will bring it to the foreground, a
.\" middle click will hide it behind other windows (if AlwaysOnTop is not set), and
.\" the right button brings up a little menu.
Clicking the workspace name brings up the toolbar menu.
Using the wheel on workspace name or the clock switches the workspace, this
could also be enabled for the whole desktop in the fluxbox menu.
.PP
When 
.B desktop warping
is enabled, dragging a window outside the desktop will change to the next desktop.
.PP
Using the toolbar menu you can enter a name for the current workspace (when finished,
press Enter).
One can choose the toolbar's position, in which layer it should be see LAYERs below
and if it should hide when the mouse leaves it.
The iconbar mode is also set via this menu: None, Icons -- Icons from all
workspaces, Workspace Icons, Workspace -- all windows from Workspace, All Windows --
from all workspaces.
.SS Layer
Fluxbox manages following layers: Above Dock, Dock, Top, Normal, Bottom, Desktop.
Presumably the list is from top to bottom. Slit and toolbar can be assigned to
a layer with the menu, applications might be assigned to a layer in the apps file.
.\" TODO the apps file has numbers for layers
.SS Window Titlebar and Borders:
A left click on any place of the window's border, will raise it.
Dragging then moves the window.
Dragging the resize grips at the left-bottom and right-bottom
corners resizes the window.
Middle clicking on border or titlebar will immediately lower the window.
Right clicking on border or titlebar pops up the window menu,
containing these commands:
.TP
.B Send To... (in 0.9.7)
Send window to another workspace.
When you select the workspace with the middle button, Fluxbox will
send you along with the application to the selected workspace
.TP
.B Shade
Shade the window (display titlebar only)
.TP
.B Iconify
Iconify window.
The `icon' can be found in the `Icons' submenu of the workspace menu
as well as in the toolbar.
.TP
.B Maximize
(Un)Maximize window. Depending on toolbar and slit configuration maximize does
cover slit and toolbar or not.
.TP
.B Button1
(usually left button) Maximize Normal, i.e. Vertical and Horizontal
.TP
.B Button2
(Un)Maximize window only vertically.
.TP
.B Button3
(Un)Maximize window only horizontal.
.TP
.B Raise
Raise window
.TP
.B Lower
Lower window
.TP
.B Stick
(Un)Stick window.
A stuck window will always be displayed in the current workspace
.TP
.B Next Client
Activate next client in this window's group.
.TP
.B Prev Client
Activate prev client in this window's group.
.TP
.B Layer ...
Change the layer of this window.
.TP
.B Remember ...
Specify which window settings should be stored in the apps file.
.TP
.B Close
Close the application cleanly
.PP
When you doubleclick on the titlebar of a window, it will `shade', so
that only the titlebar stays visible.
Another double click will redisplay the window contents.
.SS Window Buttons:
In fluxbox, the window button's configuration is controlled by \ init
file entries. The default is:
.EX 0
session.titlebar.left:  Stick
session.titlebar.right: Minimize Maximize Close
.EE
Clicking the minimize button with any button causes the window to be iconified.
Clicking the close button with any button closes the application.
The maximize button (if present) maximizes the window in three ways:
Button 1 causes full screen maximization, button 2 maximizes the window only
vertically, and button 3 only horizontally.
The Sticky button sets has the same meaning as the
.I (Un)Stick window
menu option.
.SS Any menu:
Clicking button 3 in a menu will popdown the menu.
Clicking button 1 on the titlebar of any (sub)menu and then dragging it somewhere
else will cause the menu to stay visible and not disappear when you click on
a menu item.
.SS Miscellaneous:
When you want to drag a window, but cannot see either the bottom handle or its
titlebar, you can press Alt + button 1 anywhere in the window and then
drag it around.
You can also use Alt + button 1 to raise a partially visible window.
Finally, Alt + button 2 lowers a window, and Alt + button 3 resizes the window.
.PP
This can be disabled in the resource file
.I ~/.fluxbox/init
with 
.TP
session.useMod1: \fItrue\fR or \fIfalse\fR
.SH MENU FILE
A default menu file is installed in
.IR @pkgdatadir@/menu .
Of course this system-wide menu can be customized for all users at once.
But it is also possible to create a personal menu.
It is a convention to create a directory
.IR "~/.fluxbox/" " (or " "~/fluxbox/" ")"
in your home directory, and to create a menu file, e.g.
.I menu
in this directory, or copy the system-wide menu file to this location.
Next, we have to tell Fluxbox to load our menu file instead of the default.
This is accomplished by adding (or changing) a resource value in the
.I ~/.fluxbox/init
file e.g.:
.EX
session.menuFile:       ~/.fluxbox/menu
.EE
For this change to take effect, Fluxbox has to be restarted.
Be sure that your menu is usable, then choose `Restart' from the default
Fluxbox root menu. If only the contents of the menu file changed, only
.I reload config
is needed.
.PP
A menu reload can also be forced by sending SIGUSR2.
.SS Menu behaviour
The behaviour of the menu can be configured in the 
.I ~/.fluxbox/init
file, with the following entries:
.TP
session.screen0.menuMode:  can be either Click or Delay (default: Delay)
.TP
session.screen0.menuDelay:  in msec  (default: 0 )
.TP
session.screen0.menuDelayClose: in msec (default: 0 )
.EE
.SS Menu syntax
There are up to four fields in a menu line.
They are of the form:
.EX
[tag] (label or filename) {command or filename} <icon filename>
.EE
The supported tags are as follows:
.TP
.B [begin] (label for root menu)
This tells Fluxbox to start parsing the menu file.
This tag is required for Fluxbox to parse your menu file.
If it cannot find it, the system default menu is used instead.
.TP
.B [end]
This tells Fluxbox that it is at the end of a menu.
This can either be a submenu or the main root menu.
There must be at least one of these tags in your menu to correspond to the
required [begin] tag.
.TP
.B [exec] (label for command) {shell command}
Inserts a command item into the menu.
When you select the menu item from the menu, Fluxbox runs `shell command.'
.TP
.B [exit] (label for exit)
Inserts an item that shuts down and exits Fluxbox.
Any open windows are reparented to the root window before Fluxbox exits.
.TP
.B [include] (filename)
Parses the file specified by
.I filename
inline with the
current menu. The filename can be the full path to a file or it can begin with
.IR ~/ ,
which will be expanded into your home directory (e.g.
.EX
[include] (~/fluxbox/stylesmenu)
.EE
will include
.I /home/yourusername/fluxbox/stylesmenu
in my menu).
.TP
.B [nop] (label - optional)
Insert a non-operational item into the current menu.
This can be used to help format the menu into blocks or sections
if so desired.
.B [nop]
does accept a label, but it is not required, and a blank item will be used
if none is supplied.
.TP
.B [separator]
will create a nice separator line.
.TP
.B [style] (label) {filename}
This tells Fluxbox to insert an item that, when selected, reads style file
named
.I filename
and apply the new textures, colors and fonts to the current
running session.
.TP
.B [stylesdir] (directory name)
Reads all filenames from the specified directory, assuming that they are all
valid style files (directories are ignored), and creates menu items in the
current menu for every filename, that, when selected by the user, apply the
selected style file to the current session.
The labels that are created in the menu are the filenames of the style files.
.TP
.B [stylesmenu] (label) {directory name}
Creates a submenu entry with
.I label
(that is also the title of the new submenu), and inserts in that submenu all
filenames in the specified directory, assuming that they are all valid style
files (directories are ignored) in the same way as the
.B [stylesdir]
command does.
.IP
.RB Both\  [stylesdir] \ and\  [stylesmenu]
commands make it possible to install style files without editing your menu file.
.TP
.B [submenu] (label) {title for menu - optional}
This tells Fluxbox to create and parse a new menu.
This menu is inserted as a submenu into the parent menu.
These menus are parsed recursively, so there is no limit to the number of levels
or nested submenus you can have.
The title for the new menu is optional, if none is supplied,
the new menu's title is the same as the item label.
An
.B [end]
tag is required to end the submenu.
.TP
.B [reconfig] (label)
When selected, this item rereads the current style and menu files and
apply any changes.
This is useful for creating a new style or theme, as you don't have to
constantly restart Fluxbox every time you save your style.
However, Fluxbox automagically rereads the menu whenever it changes.
.TP
.B [restart] (label) {shell command - optional}
This tells Fluxbox to restart.
If `shell command' is supplied, it shuts down and runs the command (which is
commonly the name of another window manager).
If the command is omitted, Fluxbox restarts itself.
.TP
.B [config] (label)
Inserts a Fluxbox native submenu item, containing numerous configuration
options concerning window placement, focus style, window moving style etc.
.TP
.B [workspaces] (label)
This tells Fluxbox to insert a link to the workspaces menu directly
into your menu.
This is handy for those users who can't access the
workspace menu directly (e.g. if you don't have a 3 button mouse, it's
rather hard to middle click to show the workspace menu).
.PP
Any line that starts with a `#' is considered a comment and ignored by Fluxbox.
Also, in the labels/commands/filenames fields,
you can escape any character like so:
.EX
[exec] (\\(my cool\\) \\{XTERM\\}) {xterm -T \\"cool XTERM\\"}
.EE
Using `\\\\' inserts a literal back-slash into the label/command/filename field.
.SS Menu example
Now let's put together some things.
Here is a short example of a menu file:
.PP
.nf
# Fluxbox menu file
[begin] (Fluxbox)
  [exec] (rxvt) {rxvt -ls} </usr/X11R6/share/icons/terminal.xpm>
  [exec] (netscape) {netscape -install}
  [exec] (The GIMP) {gimp}
  [exec] (XV) {xv}
  [exec] (Vim) {rxvt -geometry 132x60 -name VIM -e screen vim}
  [exec] (Mutt) {rxvt -name mutt -e mutt}
  [submenu] (mozilla)
    [exec] (browser) {mozilla -browser}
    [exec] (news) {mozilla -news}
    [exec] (mail) {mozilla -mail}
    [exec] (edit) {mozilla -edit}
    [exec] (compose) {mozilla -compose}
  [end]
  [submenu] (Window Manager)
    [exec] (Edit Menus) {nedit ~/.fluxbox/menu}
    [submenu] (Style) {Which Style?}
      [stylesdir] (~/.fluxbox/styles)
      [stylesmenu] (Fluxbox Styles) {@pkgdatadir@/styles}
    [end]
    [config] (Config Options)
    [reconfig] (Reconfigure)
    [restart] (Restart)
  [end]
  [exit] (Log Out)
[end]
# end of menu file
.fi
.\" --- styles ---
.SH STYLES
Fluxbox enables you to use specialized files that contain
.IR X (1)
resources to specify colors, textures, pixmaps and fonts, and thus
the overall look of your window borders, menus and the toolbar.
.PP
The default installation of Fluxbox provides some of these style files.
See fluxstyle(1) to accomodate the growing number of style components.
.\" --- keys ---
.SH KEYS FILE
You can customise Fluxbox' key handling through the
.IR ~/.fluxbox/keys
file.  The file takes the format of :
.EX
<modifier> <key> [...] :<operation>
.EE
In the example below, Mod1 is the 'Alt' key on the PC keyboard and Mod4 is
one of the three extra keys on a pc104 branded with a sickening corporate logo.
.EX
# Fluxbox keys file.
# Any line starting with a # is a comment.
Mod1 Tab :NextWindow
Mod1 F1 :Workspace 1
Mod1 F2 :Workspace 2
Mod1 F3 :Workspace 3
Mod1 F4 :Workspace 4
Mod1 F5 :Workspace 5
Mod1 F6 :Workspace 6
Mod1 F7 :Workspace 7
Mod1 F8 :Workspace 8
Mod1 F9 :Workspace 9
Mod4 b :PrevWorkspace
Mod4 c :Minimize
Mod4 r :ExecCommand rxvt
Mod4 v :NextWorkspace
Mod4 x :Close
Mod4 m :RootMenu
Control n Mod1 n :NextTab
.EE
As you can see from the last line, keybinds can be chained in a fashion similar
to emacs keybindings.

Commands are caseinsensitive, workspace numbering starts at "1", some commands
have synonyms.
Possible Operations:

.B window manager commands
.EX
Restart \fIargument\fR
Quit
Reconfigure
SetStyle \fIargument\fR
ExecCommand, Execute or Exec \fIcommand\fR
.EE
.B commands to currently focused window
.EX
Minimize, MinimizeWindow or Iconify
Maximize, MaximizeWindow
MaximizeVertical
MaximizeHorizontal
ResizeTo \fIwidth\fR \fIheight\fR
Resize \fIdelta-width\fR \fIdelta-height\fR
ResizeHorizontal \fIdelta-width\fR
ResizeVertical \fIdelta-height\fR
MoveTo \fIx\fR \fIy\fR
Move \fIdelta-x\fR \fIdelta-y\fR
MoveRight \fIdelta-x\fR
MoveLeft \fIdelta-x\fR
MoveUp \fIdelta-y\fR
MoveDown \fIdelta-y\fR
Raise
Lower
Close
Shade, ShadeWindow
Stick, StickWindow
ToggleDecor
SendToWorkspace \fInumber\fR : Sends the current window and takes you with it.
KillWindow
NextTab
PrevTab
MoveTabLeft
MoveTabRight
DetachClient
.EE
.B workspace commands
.EX
NextWorkspace
PrevWorkspace
RightWorkspace \fIby-number\fR
LeftWorkspace \fIby-number\fR
Workspace \fInumber\fR
NextWindow \fIby-number\fR
PrevWindow \fIby-number\fR
NextGroup \fIby-number\fR
PrevGroup \fIby-number\fR
ArrangeWindows
ShowDesktop - Iconifies all windows.
RootMenu
WorkspaceMenu
WorkspaceNameDialog - edit workspaces name dialog (old SetWorkspaceName)
SetWorkspaceName \fIname\fR
.EE
.B Prev/NextWindow Parameter
NextWindow and PrevWindow take an integer parameter.
.EX
0 or unspecified = Default/current behavior - no skipping
1 = Skip lower tabs
2 = Skip stuck windows
3 = Skip lower tabs/stuck windows
4 = Skip shaded windows
5 = Skip lower tabs/shaded windows
6 = Skip stuck windows/shaded windows
7 = Skip lower tabs/stuck windows/shaded windows
.EE
.B special commands
.EX
MacroCmd
ReloadStyle
SetResourceValue \fIresourcename\fR \fIresource value\fR
BindKey \fIkey string : action\fR   - this will append key string and 
    action to your keys file and bind the key
.EE
.\" --- groups ---
.SH GROUPS FILE
Since version 0.1.11, Fluxbox has a feature called autogrouping, that is apps are
automatically grouped together if they are in the same group.
You can create groups simply by editing the
.IR ~/.fluxbox/groups
file.
The file takes the format of:
.EX
<app1> <app2> <app3> ... <appN>
.EE
where elements can be found with this command:
.EX
xprop WM_CLASS
.EE
Just launch this command in a terminal and click on the desired app after. It will
tell you what to write as element.
Each line forms a different group, e.g:
.EX
Navigator nedit
xterm
.EE
This will create two groups, one with netscape and nedit, and one with xterm.
The new window will only group itself to other windows on the same workspace
and to the last window that was focused.
.SH THE SLIT
The slit is a special Fluxbox window frame that can contain dockable
applications, e.g. the `bbtools.'
When applications are run in the slit they have no window borders of their own;
instead they are framed in the slit, and they are always visible in the current
workspace.
You can click button 3 on the edge of the slit window to get a menu to
determine its position, whether its contained applications should be grouped
horizontally or vertically and whether the slit should hide itself when the
mouse moves away.
.PP
Most dockable applications use the
.B -w
option to run in the slit.
For example, you could put in your
.IR ~/.xinitrc :
.EX
bbmail -w &
bbpager -w &
exec fluxbox
.EE
Of course to use the slit you must have slit support compiled in.
.\" --- slitlist ---
.SH SLITLIST FILE
Since version 0.1.10, Fluxbox has the capacity to launch dockapps in the order told
by the
.IR ~/.fluxbox/slitlist
file.
.PP
A simple procedure for getting the slit sequences the way you like it is:
.EX
1) Run fluxbox with no pre-loaded dockapps.
2) Run dockapps individually in the order you want them.
3) Re-add dockapps to your auto-run script, e.g. .xinitrc or .xsession. Order doesn't matter here!
.EE
This sequence will be saved by default to
.IR ~/.fluxbox/slitlist
and will be maintained in future fluxbox sessions.
.PP
Users are free to manually edit the slitlist file. It is a simple list of window names,
one per dockapp. Similar to the init file it should be edited while not running fluxbox.
Otherwise changes may get overwritten.
.PP
The user also has the option of choosing a different path for the slit list file.
The following example
.B init
file entry changes the path:
.EX
session.slitlistFile: /home/me/etc/slitsort
.EE
.SH CONFIGURATION MENU
Fluxbox has a few options that are configured by a configure menu.
Most are self-explanatory, but here are a few notes:
.TP
.B Sloppy Window Grouping
This option allows you to drop a window-title anywhere on the target window to group it,
instead of only on the target window's window-title.
.TP
.B Maximize Over Slit
This option makes maximized windows cover the Slit when they get maximized.
Turn this option off if you want your slit to stay visible at all times.
.SH RESOURCE FILE
Usually the
.I ~/.fluxbox/init
resource file is created and maintained by Fluxbox itself.
All options from the
.B [config]
menu, the last selected style file, your workspace names and
so on are saved into this file.
However, there are some resources in it you might want to edit yourself:
.TP
.B session.menuFile:
This tells Fluxbox where to look for its menu file.
.EX
session.menuFile: /home/myself/.fluxbox/menu
.EE
.TP
.B session.keyFile:
This tells Fluxbox where to find the file describing the keybindings.
.EX
session.keyFile: /home/myself/.fluxbox/keys
.EE
.TP
.B session.styleFile:
This tells Fluxbox where to find the style (theme) file for this session.
.EX
session.styleFile: @pkgdatadir@/styles/Flux
.EE
.TP
.B session.groupFile:
This tells Fluxbox where to find the file for the autogrouping feature.
.EX
session.groupFile: /home/myself/.fluxbox/groups
.EE
.TP
.B session.slitlistFile:
This tells Fluxbox where to find the file that contains the order in which the apps are loaded in the slit.
.EX
session.slitlistFile: /home/myself/.fluxbox/slitlist
.EE
.TP
.B session.screen0.toolbar.tools:
This specifies the tools plugged into the toolbar.
Possible tools:
workspacename, prevworkspace, nextworkspace, iconbar, systemtray, prevwindow, nextwindow,
clock
e.g. :
.EX
session.screen0.toolbar.tools: clock, iconbar, workspacename
.EE
.TP
.B session.screen0.strftimeFormat:
This adjusts the way the current time is displayed in the toolbar.
The
.IR strftime (3)
format is used.
The default value is:
.IR "%I:%M %p" .
.TP
.B session.screen0.rootCommand:
This overrides the style's rootCommand. When this value is set, it will keep
your background the same, regardless of what any style would like your
background to be.
.TP
.B session.autoRaiseDelay:
Adjusts the delay (in ms) before focused windows will raise when using the
Autoraise option.
The default value is:
.IR 250 .
.TP
.B session.doubleClickInterval:
Adjust the delay (in ms) between mouse clicks for Fluxbox to consider a double click.
Default value is:
.IR 250 .
.TP
.B session.screen0.edgeSnapThreshold:
When moving a window across your screen, Fluxbox is able to have it `snap' to
the edges of the screen for easy placement.
This variable tells Fluxbox the distance (in pixels) at which the window will
jump to the edge.
Default value is:
.IR 0 .
.TP
.B session.cacheMax:
This tells Fluxbox how much memory (in Kb) it may use to store cached pixmaps on
the X server.
If your machine runs short of memory, you may lower this value.
Default value is
.IR 200 .
.TP
.B session.cacheLife:
This tells Fluxbox how long (in minutes) unused pixmaps may stay in the X
server's memory.
Default value is
.IR 5 .
.TP
.B session.opaqueMove:
When moving a window, setting this to
.IR True
will draw the window contents as it moves (nasty on slow systems), if
.IR False
it will only draw an outline of the window border.
.TP
.B session.imageDither:
.IR True
or
.IR False
to, respectively, enable or disable dithering of images.  Only necessary
on systems with small colour depths (8bpp or less)
.TP
.B session.colorsPerChannel:
This tells Fluxbox how many colors to take from the X server on pseudocolor
displays.  A channel would be red, green, or blue.
Fluxbox will allocate this variable ^ 3 colors and make them always available.
Value must be between 2 and 6.
When you run Fluxbox on an 8-bit display, you must set this resource to 4.
Default value is
.IR 4.
.TP
.B session.iconbar:
.IR True
or
.IR False
to enable or disable Fluxbox using the toolbar to display iconified windows.
.TP
.B session.screen0.iconbar.alignment:
.IR LEFT, RELATIVE or RIGHT
can be changed in the iconbar mode menu. If LEFT or RIGHT is specified the
iconbar buttons have a fixed with and are left/right aligned.
.TP
.B session.screen0.iconbar.clientWidth: 
.IR Integer
is used to specify the iconbar button width for LEFT/RIGHT alignment.
.TP
.B session.tabs:
.IR True
or
.IR False
to enable/disable Fluxbox's PWM-like window tabs.  Tabs let you group windows
together, they will take up identical desktop space (windows smaller or larger
than the existing group size get resized automatically) and can be moved as a
group around the desktop or to a different workspace.
Default value is
.IR True .
.PP
When running Fluxbox in a multiple desktop environment the
.B screen0
key can also be
.B screen1, 2
etc. for any appropriate desktop, and you can customise the behaviour of
Fluxbox on each desktop accordingly.  A favourite of the man page author
with a dual-head Matrox G450 was to autohide the slit and toolbar on
screen0 and set it alwaysontop and not autohidden on screen1, with a
larger date format on screen1
.EX
session.screen0.toolbar.onTop: False
session.screen0.toolbar.autoHide: True
session.screen0.toolbar.placement: BottomCenter
session.screen0.toolbar.widthPercent: 42
session.screen0.slit.onTop: False
session.screen0.slit.autoHide: True
session.screen0.slit.placement: TopLeft
session.screen0.slit.direction: Vertical
session.screen0.strftimeFormat: %I:%M %p
session.screen1.toolbar.onTop: True
session.screen1.toolbar.autoHide: False
session.screen1.toolbar.placement: BottomCenter
session.screen1.toolbar.widthPercent: 69
session.screen1.slit.onTop: True
session.screen1.slit.autoHide: False
session.screen1.slit.placement: CenterRight
session.screen1.slit.direction: Vertical
session.screen1.strftimeFormat: %a %d %R [%s]
.EE
This way the main workspace (screen0) has the maximum amount of space available
and the secondary workspace could show the time and run some withdrawn apps like
gkrellm in the slit, always visible yet out of the way of real work.
.\" -- apps file
.SH APPLICATIONS SETTINGS
Sometimes, you want to force an application to have always the same dimensions,
position, and other settings.  It is now possible with the new window-submenu
called 'Remember...'.  Settings are saved in the
.I ~/.fluxbox/apps
file.  You don't have to edit the file yourself as all manipulations can be
done using the 'Remember...' submenu.
.TP
.B Workspace [0-N]
Force the workspace of the application to be the current one, even if you launch
the application from another workspace.
.TP
.B Dimensions [Width Height]
Remember the current dimensions.
.TP
.B Position ([WINCENTER|CENTER|UPPERLEFT|UPPERRIGHT|LOWERLEFT|LOWERRIGHT]) [X Y]
Remember the current position. X and Y are relative to e.g. WINCENTER .
.TP
.B Shaded state [yes|no]
Remember the current shaded state.
.TP
.B Tab state [yes|no]
Remember the current tab state.
.TP
.B Decoration state [NONE|NORMAL|TOOL|TINY]
Remember the current decoration state.
.TP
.B Sticky state [yes|no]
Remember the current sticky state.
.TP
.B Jump to workspace [yes|no]
This one is only useful if 'Workspace' is set too.  The workspace is changed
to the workspace containing the application being launched.
.TP
.B Save settings on close [yes|no]
By default, application settings are not saved when a window is closed.  Set
this option if you want previous settings to be saved when the window is closed.
.PP
The 
.B apps-file
also allows to specify applications that should be started on fluxbox start
using
.B [startup] (options) {application}
lines . 
.B options
could be used to specify the screen, not the workspace, on which
the application should started. startup is not yet setable by menu.

.SS Applications example
Here is a short example of an apps file:
.PP
.nf
[startup] {xterm}
[app] (kate)
  [Dimensions]  (WINCENTER) {1022 747}
  [Position]    {0 0}
  [Close]       {yes}
[end]
[app] (konqueror)
  [Workspace]   {1}
  [Dimensions]  {1006 749}
  [Position]    {16 0}
  [Jump]        {yes}
[end]
[app] (xterm)
  [Deco]        {NONE}
[end]
.fi

Parameters in the 'apps' file are case-sensitive.  Application names are taken
from the first X-Window WM_CLASS attribute.  You can see this attribute by using
the xprop command.  Transient windows are not affected by application settings.
.SH ENVIRONMENT
.TP
.B HOME
Fluxbox uses
.RB $ HOME
to find its
.I .fluxbox/init
file, and to resolve stylefile and \-directory names.
.TP
.B DISPLAY
When no other display was given on the command line, Fluxbox will start on the
display specified by this variable.
.SH SIGNALS
Upon receipt of 
.B SIGHUP
fluxbox loads the configuration, 
.B SIGUSR1
forces reloading of configuration and 
.B SIGUSR2
reloads the menu file.
.SH AUTHOR and CREDITS
Blackbox was written and maintained by Brad Hughes
.nh \" hyphenation off
<blackbox@alug.org>
.hy \" on again
and Jeff Raven
.nh
<jraven@psu.edu>,
.hy
Fluxbox is written and maintained by Henrik Kinnunen
.nh
<fluxgen@linuxmail.org>
.hy
with contributions and patches merged from
many individuals around the world.
.PP
The Official Fluxbox website:
.nh
.B http://fluxbox.sf.net/
.hy
.br
Many compatible themes:
.nh
.B http://themes.freshmeat.net/
.hy
.PP
This manpage was put together by Matthew Hawkins
.nh
<matt@mh.dropbear.id.au>
.hy
from the original Blackbox man page by Wilbert Berendsen
.nh
<wbsoft@xs4all.nl>
.hy
and subsequently hacked upon by Tobias Klausmann
.nh
<klausman@users.sourceforge.net>
,
<grubert@users.sourceforge.net>
,
<asenchi@asenchi.com>
.hy
.PP
Numerous other languages could be available if someone jumps in.
.SH SEE ALSO
.IR bsetroot (1) 
.IR bsetroot fbrun(1) 
.IR bsetroot fbsetbg(1) 
.IR bsetroot fluxstyle(1) 

